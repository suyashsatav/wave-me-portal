{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","message","setMessage","contractABI","abiFile","abi","getAllWaves","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","console","log","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","useEffect","className","for","id","type","onChange","event","target","value","onClick","map","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf2ef140.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport { ethers } from \"ethers\";\nimport abiFile from \"./utils/WavePortal.json\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n  const [message, setMessage] = useState([]);\n  const contractAddress = \"0x1dB03d621500B174D3D1c44302b8743fE288005D\";\n  const contractABI = abiFile.abi;\n\n  /*\n   * Create a method that gets all waves from your contract\n   */\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n        const waves = await wavePortalContract.getAllWaves();\n        \n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n\n        /*\n         * Store our data in React State\n         */\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const handleMessageChange = (event) => {\n    setMessage(event.target.value);\n  }\n\n  /**\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n      try {\n        if (!message || message.length == 0)\n          return;\n\n        const { ethereum } = window;\n\n        if (ethereum) {\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n          let count = await wavePortalContract.getTotalWaves();\n          console.log(\"Retrieved total wave count...\", count.toNumber());\n\n          /*\n          * Execute the actual wave from your smart contract\n          */\n          const waveTxn = await wavePortalContract.wave(message, { gasLimit: 300000 });\n          console.log(\"Mining...\", waveTxn.hash);\n\n          await waveTxn.wait();\n          console.log(\"Mined -- \", waveTxn.hash);\n\n          count = await wavePortalContract.getTotalWaves();\n          console.log(\"Retrieved total wave count...\", count.toNumber());\n          getAllWaves();\n        } else {\n          console.log(\"Ethereum object doesn't exist!\");\n        }\n      } catch (error) {\n        console.log(error)\n      }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n  \n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        üëã Hey there!\n        </div>\n\n        <div className=\"bio\">\n          I am Suyash Satav. Connect your Ethereum wallet and wave at me!\n        </div>\n        <br/>\n        <label for= \"messageTextBox\" className=\"bio\">\n          Please enter a message you would want me to store on the blockchain. üòÅ\n        </label>\n        <input id=\"messageTextBox\" type=\"text\" onChange={handleMessageChange}></input>\n        <br/>\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n\n        {/*\n        * If there is no currentAccount render this button\n        */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>)\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}