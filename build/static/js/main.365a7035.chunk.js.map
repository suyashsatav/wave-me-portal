{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","contractABI","abiFile","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWallet","alert","wave","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","toNumber","waveTxn","hash","wait","useEffect","className","onClick","ReactDOM","render","document","getElementById"],"mappings":"0mOAuHeA,EAlHH,WACV,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAEMC,EAAcC,EAAQC,IAEtBC,EAAwB,uCAAG,kCAAAC,EAAA,oEAERC,OAAbC,EAFqB,EAErBA,SAFqB,uBAK3BC,QAAQC,IAAI,gCALe,0BAQ3BD,QAAQC,IAAI,8BAA+BF,GARhB,wBAWNA,EAASG,QAAQ,CAAEC,OAAQ,iBAXrB,QAaL,KAFlBC,EAXuB,QAahBC,QACLC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,+BAAgCK,GAC5Cd,EAAkBc,IAElBN,QAAQC,IAAI,+BAlBe,kDAqB7BD,QAAQC,IAAR,MArB6B,0DAAH,qDA4BxBM,EAAa,uCAAG,gCAAAV,EAAA,oEAEGC,OAAbC,EAFU,EAEVA,SAFU,uBAKhBS,MAAM,iBALU,0CASKT,EAASG,QAAQ,CAAEC,OAAQ,wBAThC,OASZC,EATY,OAWlBJ,QAAQC,IAAI,YAAaG,EAAS,IAClCZ,EAAkBY,EAAS,IAZT,kDAclBJ,QAAQC,IAAR,MAdkB,0DAAH,qDAkBbQ,EAAI,uCAAG,wCAAAZ,EAAA,oEAEcC,SAAbC,EAFD,EAECA,UAFD,wBAKCW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SAxDtB,6CAwDgDxB,EAAaqB,GAPxE,SASaE,EAAmBE,gBAThC,cASDC,EATC,OAULnB,QAAQC,IAAI,gCAAiCkB,EAAMC,YAV9C,UAeiBJ,EAAmBP,OAfpC,eAeCY,EAfD,OAgBLrB,QAAQC,IAAI,YAAaoB,EAAQC,MAhB5B,UAkBCD,EAAQE,OAlBT,eAmBLvB,QAAQC,IAAI,YAAaoB,EAAQC,MAnB5B,UAqBSN,EAAmBE,gBArB5B,QAqBLC,EArBK,OAsBLnB,QAAQC,IAAI,gCAAiCkB,EAAMC,YAtB9C,wBAwBLpB,QAAQC,IAAI,kCAxBP,0DA2BPD,QAAQC,IAAR,MA3BO,0DAAH,qDAmCV,OAJAuB,qBAAU,WACR5B,MACC,IAGD,yBAAK6B,UAAU,iBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,UAAf,2BAIA,yBAAKA,UAAU,OAAf,mEAIA,4BAAQA,UAAU,aAAaC,QAASjB,GAAxC,eAOElB,GACA,4BAAQkC,UAAU,aAAaC,QAASnB,GAAxC,qBCzGVoB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.365a7035.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport { ethers } from \"ethers\";\nimport abiFile from \"./utils/WavePortal.json\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const contractAddress = \"0x1aA3289b904B113B959059B940186684a5c6cd85\";\n  const contractABI = abiFile.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n      try {\n        const { ethereum } = window;\n\n        if (ethereum) {\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n          let count = await wavePortalContract.getTotalWaves();\n          console.log(\"Retrieved total wave count...\", count.toNumber());\n\n          /*\n          * Execute the actual wave from your smart contract\n          */\n          const waveTxn = await wavePortalContract.wave();\n          console.log(\"Mining...\", waveTxn.hash);\n          \n          await waveTxn.wait();\n          console.log(\"Mined -- \", waveTxn.hash);\n          \n          count = await wavePortalContract.getTotalWaves();\n          console.log(\"Retrieved total wave count...\", count.toNumber());\n        } else {\n          console.log(\"Ethereum object doesn't exist!\");\n        }\n      } catch (error) {\n        console.log(error)\n      }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n  \n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        ðŸ‘‹ Hey there!\n        </div>\n\n        <div className=\"bio\">\n          I am Suyash Satav. Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n        \n        {/*\n        * If there is no currentAccount render this button\n        */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}